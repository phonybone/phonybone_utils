#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
General purpose script to make an HTTP request and display the results.
Requests are configured by supplying a profile.json file.

Author: Victor Cassen
vmc.swdev@gmail.com
'''
# todo:
# better handling of exceptions in async
# handle response from arun
# re-factor sync, async, and threaded models with common interface
# Implement environments

import sys
import os
import json
import logging
import asyncio

from pbutils.argparsers import parser_stub, wrap_main
from pbutils.request.logs import log
from pbutils.streams import die
from pbutils.request.sync_req import run_sync, handle_response
from pbutils.request.async_req import arun
from pbutils.request.threaded_rec import ThreadedReq


def main(config):
    ''' main entry point '''
    if sys.version_info < (3,7):
        die("Sorry, you need python 3.7 or better to run this script")

    arun_kwargs = {}
    if 'DEBUG' in os.environ or config.debug:
        log.setLevel(logging.DEBUG)
        arun_kwargs['debug'] = True

    profiles = get_profiles(config.arg[0])
    if config.n_threads:
        runner = ThreadedReq(config.n_threads, config, {})
        runner.run(profiles)
        for profile, response in runner.do_responses():
            print(F"main: get profile, resp")
            handle_response(profile, response, config)
    elif config.do_async:
        asyncio.run(arun(profiles), **arun_kwargs)
    else:
        for profile, response in run_sync(profiles):
            handle_response(profile, response, config)

def get_profiles(profile_fn):
    ''' read and return list of profiles from file '''
    with open(profile_fn) as prf:
        profiles = json.load(prf)
    if isinstance(profiles, dict):
        profiles = [profiles]   # convert a single profile to a list length=1
    if not isinstance(profiles, list):
        raise ValueError(F"profile_fn: must contain list (got {type(profiles)})")
    return profiles


def make_parser():
    parser = parser_stub(__doc__)
    parser.add_argument('--do-async', help='run in asyncio mode', action='store_true')
    parser.add_argument('--n-threads', type=int, help='run with N threads')
    parser.add_argument('arg', nargs='*')
    return parser


if __name__ == '__main__':
    wrap_main(main, make_parser())
